m3;
rbind(1:4, 6:9);
cbind(1:4, 6:9);
cbind(11:12, m3);
cbind(m3, 11:12);
rbind(1:4, 6:9);
cbind(1:4, 6:9);
cbind(11:12, m3);
cbind(m3, 11:12);
# Factors
# Factors are used for categorical variables
# Factors can be converted from vectors
var_vector <- c("A", "B", "AB", "A", "O");
var_factor <- factor(var_vector);
var_factor;
str(var_vector);
str(var_factor);
summary(var_factor);
# Factors are internally stored as integer vectors. Indexed using levels
# Levels are computed automatically and sorted alphabetically, else one can specify them
var2_vector <- c("L", "H", "L", "M", "H");
var2_factor <-
factor(var2_vector,
levels = c("L", "M", "H"),
labels = c("Low", "Medium", "High"),
ordered = T);
str(var2_factor);
summarize(var2_factor);
var2_vector <- c("L", "H", "L", "M", "H");
var2_factor <-
factor(var2_vector,
levels = c("L", "M", "H"),
labels = c("Low", "Medium", "High"),
ordered = T);
str(var2_factor);
summarize(var2_factor);
# Factors
# Factors are used for categorical variables
# Factors can be converted from vectors
var_vector <- c("A", "B", "AB", "A", "O");
var_factor <- factor(var_vector);
var_factor;
str(var_vector);
str(var_factor);
summary(var_factor);
# Factors are internally stored as integer vectors. Indexed using levels
# Levels are computed automatically and sorted alphabetically, else one can specify them
var2_vector <- c("L", "H", "L", "M", "H");
var2_factor <-
factor(var2_vector,
levels = c("L", "M", "H"),
labels = c("Low", "Medium", "High"),
ordered = T);
str(var2_factor);
summary(var2_factor);
# Lists
# List is basically a key value pair where value can be other data structure
var_list <- c("string", 1, 5);
is.list(var_list);
var_list;
str(var_list);
names(var_list) <- c("col1", "col2", "col3");
var_list;
str(var_list);
# List is basically a key value pair where value can be other data structure
var_list <- list("string", 1, 5);
is.list(var_list);
var_list;
str(var_list);
names(var_list) <- c("col1", "col2", "col3");
var_list;
str(var_list);
# Subsetting a list
# Subsetting using single bracket results in list
var_list[1];
# Subsetting using double square brackets results in actual content
var_list[[1]];
# Subsetting a list
var_list2 <- c(c("A", "B"), 1:4, matrix(1:6, ncol = 2, nrow = 3));
# Subsetting using single bracket results in list
var_list2[1];
# Subsetting using double square brackets results in actual content
var_list2[[1]];
# Subsetting a list
var_list2 <- list(c("A", "B"), 1:4, matrix(1:6, ncol = 2, nrow = 3));
str(var_list2);
# Subsetting using single bracket results in list
var_list2[1];
# Subsetting using double square brackets results in actual content
var_list2[[1]];
# Subsetting a list
var_list2 <- list(c("A", "B"), 1:4, matrix(1:6, ncol = 2, nrow = 3));
str(var_list2);
names(var_list2) <- c("vec_c", "vec_n", "mat");
str(var_list2);
# Subsetting using single bracket results in list
var_list2[1];
# Subsetting using double square brackets results in actual content
var_list2[[1]];
var_list2["mat"];
var_list2[["mat"]];
var_list2["mat"];
class(var_list2["mat"]);
var_list2[["mat"]];
class(var_list2[["mat"]]);
var_list2$vec_n;
var_list2[["vec_n"]];
# $ sign and [[]] are equivalent during subsetting of vector
var_list2$vec_n;
var_list2[["vec_n"]];
var_list2$add_vec <- c(4:6);
str(var_list2);
var_list2[["add_vec"]] <- c(7:9);
str(var_list2);
# Adding new vector to the list
var_list2$add_vec <- c(4:6);
str(var_list2);
# Replacing the added list. $ and [[]] are equivalent during extension
var_list2[["add_vec"]] <- c(7:9);
str(var_list2);
# Appending the list to already available list
var_list2[["add_vec"]] <- c(var_list2[["add_vec"]],c(7:9));
str(var_list2);
# Adding new vector to the list
var_list2$add_vec <- c(4:6);
str(var_list2);
# Replacing the added list. $ and [[]] are equivalent during extension
var_list2[["add_vec"]] <- c(7:9);
str(var_list2);
# Appending the list to already available list
var_list2[["add_vec"]] <- c(var_list2[["add_vec"]],c(10:12));
str(var_list2);
var_list[c(1,2)];
var_list2[c(1,2)];
var_list2[[c(2,4)]];
# Returns sub lists for first and second contents of the list
var_list2[c(1,2)];
# Returns 4th element from 2nd vector in list
var_list2[[c(2,4)]];
# Data Frame
# Table like structure, to store data
vec_name <- c("Name1", "Name2", "Name3");
vec_age <- c(23, 26, 21);
vec_cs <- c(T, F, T);
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs);
data_frame;
str(data_frame);
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs,
stringAsFactors = F);
str(data_frame);
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs,
stringsAsFactors = F);
str(data_frame);
names(data_frame) <- c("Name_Col", "Age_Col", "Major_Col");
str(data_frame);
m3 <- matrix(1:6, nrow=2, byrow = T);
m3;
m3[c(1,2), c(2,3)];
class(m3[c(1,2), c(2,3)]);
class(m3[,2]);
m3[,2];
class(m3[,2]);
is.vector(m3[,2]);
type(m3[,2]);
typeof(m3[,2]);
is.vector(m3[c(1,2), c(2,3)]);
data_frame;
data_frame(2,3);
data_frame[2,3];
is.vector(data_frame[2,3]);
data_frame$Age_Col;
is.vector(data_frame$Age_Col);
data_frame[2];
is.vector(data_frame[2]);
is.vector(data_frame[[2]);
data_frame[2];
is.vector(data_frame[2]);
is.list(data_frame[[2]);
data_frame[2];
is.vector(data_frame[2]);
is.list(data_frame[[2]]);
is.data.frame(data_frame[[2]]);
data_frame[2];
is.vector(data_frame[2]);
is.list(data_frame[2]);
is.data.frame(data_frame[2]);
data_frame[2];
is.vector(data_frame[2]);
is.data.frame(data_frame[2]);
data_frame[[2]];
is.vector(data_frame[[2]);
is.data.frame(data_frame[[2]);
data_frame[2];
is.vector(data_frame[2]);
is.data.frame(data_frame[2]);
data_frame[[2]];
is.vector(data_frame[[2]]);
is.data.frame(data_frame[[2]);
data_frame[2];
is.vector(data_frame[2]);
is.data.frame(data_frame[2]);
data_frame[[2]];
is.vector(data_frame[[2]]);
is.data.frame(data_frame[[2]]);
# Adding Column
data_frame$new_col1 <- c(1,2,3);
# cbind and rbind works well too
cbind(data_frame, c(4,5,6));
# rbind will require having a data frame to append to existing data frame
data_frame;
# cbind and rbind works well too
data_frame <- cbind(data_frame, c(4,5,6));
# rbind will require having a data frame to append to existing data frame
data_frame;
new_row <- data.frame("Name4", 27, T, 4, 7);
rm(data_frame);
# Data Frame
# Table like structure, to store data
vec_name <- c("Name1", "Name2", "Name3");
vec_age <- c(23, 26, 21);
vec_cs <- c(T, F, T);
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs);
data_frame;
str(data_frame);
# Data frames are iternally stored as lists
# Strings are casted to factors by default
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs,
stringsAsFactors = F);
str(data_frame);
names(data_frame) <- c("Name_Col", "Age_Col", "Major_Col");
str(data_frame);
data_frame;
# Data frame subsetting similar to Matrix - row, column
# Index number or name would work
# Matrix notation
data_frame[2,3];
is.vector(data_frame[2,3]);
data_frame$Age_Col;
is.vector(data_frame$Age_Col);
# Returns a data frame column
data_frame[2];
is.vector(data_frame[2]);
is.data.frame(data_frame[2]);
# Returns the actual data structure type
data_frame[[2]];
is.vector(data_frame[[2]]);
is.data.frame(data_frame[[2]]);
# Adding Column
data_frame$new_col1 <- c(1,2,3);
# cbind and rbind works well too
cbind(data_frame, c(4,5,6));
# rbind will require having a data frame to append to existing data frame
data_frame;
# rbind will require having a data frame to append to existing data frame
data_frame;
new_row <- data.frame("Name4", 27, T, 4);
rbind(data_frame, new_row);
data_frame <- cbind(data_frame, c(4,5,6));
# rbind will require having a data frame to append to existing data frame
data_frame;
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 27,
Major_col = T,
new_col1 = 4,
7);
rbind(data_frame, new_row);
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 27,
Major_col = T,
new_col1 = 4,
c(4,5,6)=7);
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 27,
Major_col = T,
new_col1 = 4,
'c(4,5,6)'=7);
rbind(data_frame, new_row);
# rbind will require having a data frame to append to existing data frame
data_frame;
View(data_frame)
rm(data_frame);
# Data Frame
# Table like structure, to store data
vec_name <- c("Name1", "Name2", "Name3");
vec_age <- c(23, 26, 21);
vec_cs <- c(T, F, T);
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs);
data_frame;
str(data_frame);
# Data frames are iternally stored as lists
# Strings are casted to factors by default
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs,
stringsAsFactors = F);
str(data_frame);
names(data_frame) <- c("Name_Col", "Age_Col", "Major_Col");
str(data_frame);
data_frame;
# Data frame subsetting similar to Matrix - row, column
# Index number or name would work
# Matrix notation
data_frame[2,3];
is.vector(data_frame[2,3]);
data_frame$Age_Col;
is.vector(data_frame$Age_Col);
# Returns a data frame column
data_frame[2];
is.vector(data_frame[2]);
is.data.frame(data_frame[2]);
# Returns the actual data structure type
data_frame[[2]];
is.vector(data_frame[[2]]);
is.data.frame(data_frame[[2]]);
# Adding Column
data_frame$new_col1 <- c(1,2,3);
# cbind and rbind works well too
cbind(data_frame, c(4,5,6));
# rbind will require having a data frame to append to existing data
data_frame;
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 27,
Major_col = T,
new_col1 = 4);
rbind(data_frame, new_row);
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 27,
Major_Col = T,
new_col1 = 4);
rbind(data_frame, new_row);
data_frame <- rbind(data_frame, new_row);
# rbind will require having a data frame to append to existing data
data_frame;
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 26,
Major_Col = T,
new_col1 = 4);
data_frame <- rbind(data_frame, new_row);
# rbind will require having a data frame to append to existing data
data_frame;
sort(data_frame$Age_Col);
order(data_frame$Age_Col);
data_frame[order(data_frame$Age_Col)];
data_frame[order(data_frame$new_col1, descending = T)];
data_frame[order(data_frame$Age_Col),];
data_frame[order(data_frame$new_col1, descending = T),];
order(data_frame$new_col1, descending = T)
data_frame[order(data_frame$new_col1, decreasing = T),];
rm(data_frame);
# Data Frame
# Table like structure, to store data
vec_name <- c("Name1", "Name2", "Name3");
vec_age <- c(23, 26, 21);
vec_cs <- c(T, F, T);
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs);
data_frame;
str(data_frame);
# Data frames are iternally stored as lists
# Strings are casted to factors by default
data_frame <- data.frame(Name = vec_name,
Age = vec_age,
Major_CS = vec_cs,
stringsAsFactors = F);
str(data_frame);
names(data_frame) <- c("Name_Col", "Age_Col", "Major_Col");
str(data_frame);
data_frame;
# Data frame subsetting similar to Matrix - row, column
# Index number or name would work
# Matrix notation
data_frame[2,3];
is.vector(data_frame[2,3]);
data_frame$Age_Col;
is.vector(data_frame$Age_Col);
# Returns a data frame column
data_frame[2];
is.vector(data_frame[2]);
is.data.frame(data_frame[2]);
# Returns the actual data structure type
data_frame[[2]];
is.vector(data_frame[[2]]);
is.data.frame(data_frame[[2]]);
# Adding Column
data_frame$new_col1 <- c(1,2,3);
# cbind and rbind works well too
cbind(data_frame, c(4,5,6));
# rbind will require having a data frame to append to existing data
data_frame;
new_row <- data.frame(Name_Col = "Name4",
Age_Col = 26,
Major_Col = T,
new_col1 = 4);
data_frame <- rbind(data_frame, new_row);
# Sorts a single given vector
sort(data_frame$Age_Col);
# Order function returns ranks, which can then be used for sorting
order(data_frame$Age_Col);
data_frame[order(data_frame$Age_Col),];
data_frame[order(data_frame$new_col1, decreasing = T),];
c(T,T,T,T,T,F,F,F) == T
c(T,F,T,T,F,T,F,F) == T
data_frame[data_frame$Age_Col > 24,];
# Factors
# Factors are used for categorical variables
# Factors can be converted from vectors
var_vector <- c("A", "B", "AB", "A", "O");
var_factor <- factor(var_vector);
var_factor;
str(var_vector);
str(var_factor);
summary(var_factor);
# Factors are internally stored as integer vectors. Indexed using levels
# Levels are computed automatically and sorted alphabetically, else one can specify them
var2_vector <- c("L", "H", "L", "M", "H");
var2_factor <-
factor(var2_vector,
levels = c("L", "M", "H"),
labels = c("Low", "Medium", "High"),
ordered = T);
str(var2_factor);
summary(var2_factor);
# Levels and Labels are in 1:1 correspondance
summary(var2_factor);
var2_factor["Low"]
# Levels and Labels are in 1:1 correspondance
var2_factor["L"]
var2_factor[4]
# Levels and Labels are in 1:1 correspondance
c(var2_factor=="L");
# Levels and Labels are in 1:1 correspondance
c(var2_factor=="Low");
var2_factor=="Low"
# Levels and Labels are in 1:1 correspondance
# Factor is change in internal storage representation
# Subsetting is same as Vectors
c(var2_factor=="Low");
class(var2_factor=="Low");
var2_factor[2];
# Levels and Labels are in 1:1 correspondance
# Factor is change in internal storage representation
# Subsetting is same as Vectors
c(var2_factor=="Low");
class(var2_factor=="Low");
class(c(var2_factor=="Low"));
var2_factor[2];
is.vector(var2_factor=="Low");
# Lists
# List is basically a key value pair where value can be other data structure
var_list <- list("string", 1, 5);
is.list(var_list);
var_list;
str(var_list);
names(var_list) <- c("col1", "col2", "col3");
var_list;
str(var_list);
# Subsetting a list
var_list2 <- list(c("A", "B"), 1:4, matrix(1:6, ncol = 2, nrow = 3));
str(var_list2);
names(var_list2) <- c("vec_c", "vec_n", "mat");
str(var_list2);
# Subsetting using single bracket results in list
var_list2[1];
# Subsetting using double square brackets results in actual content
var_list2[[1]];
var_list2["mat"];
class(var_list2["mat"]);
var_list2[["mat"]];
class(var_list2[["mat"]]);
# $ sign and [[]] are equivalent during subsetting of vector
var_list2$vec_n;
var_list2[["vec_n"]];
# Adding new vector to the list
var_list2$add_vec <- c(4:6);
str(var_list2);
# Replacing the added list. $ and [[]] are equivalent during extension
var_list2[["add_vec"]] <- c(7:9);
str(var_list2);
# Appending the list to already available list
var_list2[["add_vec"]] <- c(var_list2[["add_vec"]],c(10:12));
str(var_list2);
# Returns sub lists for first and second contents of the list
var_list2[c(1,2)];
# Returns 4th element from 2nd vector in list
var_list2[[c(2,4)]];
?plot
?par
?hist
?layout
grid <- matrix(c(1,1,2,3), byrow=T);
grid;
?par
?coef
?abline
?par
help TukeyHSDS()
help TukeyHSD
?TukeyHSD
?pairwise.t.test
